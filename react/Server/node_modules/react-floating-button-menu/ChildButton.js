'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styledJss = require('styled-jss');

var _styledJss2 = _interopRequireDefault(_styledJss);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-nested-ternary  */


var Wrapper = (0, _styledJss2.default)('li')(function (_ref) {
  var isOpen = _ref.isOpen,
      slideSpeed = _ref.slideSpeed,
      background = _ref.background,
      size = _ref.size,
      iconColor = _ref.iconColor,
      spacing = _ref.spacing,
      direction = _ref.direction;
  return {
    background: background,
    display: 'flex',
    border: 'none',
    borderRadius: '50%',
    boxShadow: '0 0 4px rgba(0,0,0,.14),0 4px 8px rgba(0,0,0,.28)',
    cursor: 'pointer',
    outline: 'none',
    padding: '0',
    WebkitUserDrag: 'none',
    fontWeight: 'bold',
    justifyContent: 'center',
    alignItems: 'center',
    opacity: isOpen ? 1 : 0,
    transition: 'all ' + slideSpeed + 'ms',
    width: size,
    height: size,
    marginTop: direction === 'down' ? spacing : 0,
    marginBottom: direction === 'up' ? spacing : 0,
    marginLeft: direction === 'right' ? spacing : 0,
    marginRight: direction === 'left' ? spacing : 0,
    color: iconColor,
    pointerEvents: isOpen ? 'auto' : 'none'
  };
});

var ChildButton = function (_Component) {
  _inherits(ChildButton, _Component);

  function ChildButton() {
    _classCallCheck(this, ChildButton);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  ChildButton.prototype.render = function render() {
    var _props = this.props,
        icon = _props.icon,
        index = _props.index,
        direction = _props.direction,
        size = _props.size,
        spacing = _props.spacing,
        isOpen = _props.isOpen,
        onClick = _props.onClick;

    var offsetX = direction === 'right' ? (size + spacing) * index : direction === 'left' ? (size + spacing) * index * -1 : 0;
    var offsetY = direction === 'down' ? (size + spacing) * index : direction === 'up' ? (size + spacing) * index * -1 : 0;

    return _react2.default.createElement(
      Wrapper,
      _extends({}, this.props, {
        onClick: isOpen ? onClick : null,
        style: {
          transform: 'translate(' + (isOpen ? 0 : -offsetX) + 'px, ' + (isOpen ? 0 : -offsetY) + 'px)'
        }
      }),
      icon
    );
  };

  return ChildButton;
}(_react.Component);

ChildButton.propTypes = {
  icon: _propTypes2.default.node.isRequired,
  direction: _propTypes2.default.string,
  index: _propTypes2.default.number,
  onClick: _propTypes2.default.func,
  isOpen: _propTypes2.default.bool,
  size: _propTypes2.default.number,
  spacing: _propTypes2.default.number
};
ChildButton.defaultProps = {
  direction: 'up',
  index: 1,
  iconColor: 'black',
  size: '40',
  spacing: 0,
  isOpen: false,
  onClick: null
};
exports.default = ChildButton;