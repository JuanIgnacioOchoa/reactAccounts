function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styledJss from 'styled-jss';

export var DIRECTIONS = {
  up: 'column-reverse',
  down: 'column',
  left: 'row-reverse',
  right: 'row'
};

var StyledUl = styledJss('ul')(function (_ref) {
  var direction = _ref.direction;
  return {
    display: 'flex',
    width: 'fit-content',
    listStyle: 'none',
    margin: '0',
    padding: '0',
    flexDirection: DIRECTIONS[direction],
    justifyContent: 'center',
    alignItems: 'center'
  };
});

var FloatingMenu = function (_Component) {
  _inherits(FloatingMenu, _Component);

  function FloatingMenu() {
    _classCallCheck(this, FloatingMenu);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  FloatingMenu.prototype.render = function render() {
    var _props = this.props,
        slideSpeed = _props.slideSpeed,
        direction = _props.direction,
        className = _props.className,
        isOpen = _props.isOpen,
        spacing = _props.spacing;

    var childrenWithProps = React.Children.map(this.props.children, function (child, index) {
      return React.cloneElement(child, {
        isOpen: isOpen,
        slideSpeed: slideSpeed,
        direction: direction,
        index: index,
        spacing: spacing
      });
    });

    return React.createElement(
      StyledUl,
      {
        className: className,
        onClick: this.toggleMenu,
        direction: direction
      },
      childrenWithProps
    );
  };

  return FloatingMenu;
}(Component);

FloatingMenu.propTypes = {
  className: PropTypes.string,
  children: PropTypes.arrayOf(PropTypes.element).isRequired,
  slideSpeed: PropTypes.number,
  spacing: PropTypes.number,
  direction: PropTypes.string,
  isOpen: PropTypes.bool
};
FloatingMenu.defaultProps = {
  className: '',
  slideSpeed: 500,
  direction: 'down',
  isOpen: false,
  spacing: 8
};


export default FloatingMenu;